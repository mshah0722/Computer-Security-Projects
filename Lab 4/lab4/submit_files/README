#Malhar Shah, 1004926912, malhar.shah@mail.utoronto.ca
#Shadman Kaif, 1005303137, shadman.kaif@mail.utoronto.ca

----- NOTE -----
<RNDC port number in rndc.conf> = 12726
<query port> = 12728
<listen on port> = 12729

// Part 1 Explanation
1. I used this command: "dig ecf.utoronto.ca" to query the IPv4 address of ecf.utoronto.ca.
2. I used this command: "dig ecf.utoronto.ca NS" to query the name servers of ecf.utoronto.ca. This returned two ns#.utoronto.ca name servers, 
    which are the name servers of ecf.utoronto.ca.
3. I used this command: "dig ecf.utoronto.ca MX" to get the name of the mail server: ecf-utoronto-ca.mail.protection.outlook.com. 
    Now I used this command: "dig ecf-utoronto-ca.mail.protection.outlook.com" to get the IP addresses of each of the 2 mail servers.
4. For this part, I added these parameters "@127.0.0.1 -p <BIND listen on port>" to each of the earlier commands in order to direct it to the BIND server:
    "dig @127.0.0.1 -p 12729 ecf.utoronto.ca"
    "dig @127.0.0.1 -p 12729 ecf.utoronto.ca NS"
    "dig @127.0.0.1 -p 12729 ecf.utoronto.ca MX"
    "dig @127.0.0.1 -p 12729 ecf-utoronto-ca.mail.protection.outlook.com"

// Part 2 Explanation
First, using the port specified in the dig command, we generated a socket listening on connections from the command. To connect to the BIND server, we also opened another socket. We use the BIND socket to forward messages to the BIND server whenever we receive a request from the dig socket. When the BIND server responds with an answer, we use the dig socket to relay it back to the dig command.

How to run Part 2 (on three different terminals):
./run_bind.sh
python2 dnsproxy_starter.py --port 9145 --dns_port 12729
dig @127.0.0.1 -p 9145 utoronto.ca

// Part 3 Explanation
In this section, once I received the responses, I would first intercept and forge DNS replies using the proxy created in part 2. Then I modified change the IP address to 1.2.3.4 instead. 
Then I changed the contents of name servers to be "ns.dnslabattacker.net" and "ns.dnslabattacker.net". Lastly, I sent it to the client, the dig command.

How to run Part 3 (on three different terminals):
./run_bind.sh
python2 dnsproxy_starter.py --port 9145 --dns_port 12729 --spoof_response
dig @127.0.0.1 -p 9145 utoronto.ca

// Part 4 Explanation
I first issued a request for a typical reply packet for example.com in order to carry out the DNS cache poisoning attack. The BIND server's listen-on port received a fake DNS request for an invalid name in example.com. In the meantime, I created a response packet that I falsified, changing the name server's IP to ns.dnslabattacker.net, then flooded the BIND server's query-source port with it. Each of these fake responses had a separate transaction ID. I kept going through the above steps till I succeeded.

How to run Part 4 (on three different terminals):
./run_bind.sh
./part4_starter.py --ip 127.0.0.1 --port 12729 --query_port 12278
Verify with: dig @127.0.0.1 NS example.com -p 12729
